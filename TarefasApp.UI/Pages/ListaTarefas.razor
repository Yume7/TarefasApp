@page "/tarefas"
@using TarefasApp.Domain.DTOs.Responses
@inject TarefaService TarefaService
@inject NavigationManager Navigation

<h3 class="text-center mt-4">Lista de Tarefas</h3>

@if (tarefas == null)
{
    <div class="text-center mt-4">
        <p class="text-muted">Carregando tarefas...</p>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="row">
            @foreach (var tarefa in tarefas)
            {
                <div class="col-lg-4 col-md-6 col-sm-12 mb-4">
                    <div class="card shadow-lg border-0 rounded-3">
                        <div class="card-body">
                            <h5 class="card-title text-primary">@tarefa.Titulo</h5>
                            <p class="card-text text-muted">@tarefa.Descricao</p>
                            <p><strong>Data:</strong> @tarefa.Data.ToString("dd/MM/yyyy")</p>
                            <p>
                                <strong>Status:</strong>
                                <span class="badge @(tarefa.Status == 0 ? "bg-warning text-dark" : "bg-success")">
                                    @(tarefa.Status == 0 ? "Pendente" : "Concluída")
                                </span>
                            </p>
                            <div class="d-flex justify-content-between mt-3">
                                <button class="btn btn-outline-primary w-50 me-2" @onclick="() => EditarTarefa(tarefa.Id)">
                                    <i class="bi bi-pencil"></i> Editar
                                </button>
                                <button class="btn btn-outline-danger w-50" @onclick="() => ExcluirTarefa(tarefa.Id)">
                                    <i class="bi bi-trash"></i> Excluir
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}


@code {
    private List<TarefaResponseDTO> tarefas = new();

    protected override async Task OnInitializedAsync()
    {
        tarefas = await TarefaService.Consultar();
    }

    private void EditarTarefa(Guid id)
    {
        Navigation.NavigateTo($"/editar-tarefa/{id}");  
    }

    private async Task ExcluirTarefa(Guid id)
    {
        await TarefaService.Deletar(id);  
        tarefas.RemoveAll(t => t.Id == id);  
    }
}
